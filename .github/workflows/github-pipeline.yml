name: Github Pipeline
on:
  push:
    branches:
      - main
      - refactor-v2
    tags:
      - "*"
  pull_request:

permissions:
  contents: read

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Install dependencies
        run: go mod download

      - name: Run unit tests with coverage
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./pkg/... ./internal/... ./cmd/...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
          echo "Test coverage: $COVERAGE" >> $GITHUB_STEP_SUMMARY

  linting:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --config .golangci.yml

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, linting]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Build Binary
        run: |
          make build

      - name: Run Integration Tests
        run: |
          # For integration tests, we just run them without coverage since they test the binary via HTTP
          go test -v -tags=integration -race ./tests/integration/...

  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [unit-tests, linting, integration-tests]
    # Only build Docker images for the branches and tags specified above, not for PRs
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: "docker.io"
      IMAGE_NAME: "jdschulze/restinthemiddle"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=${{ github.ref == 'refs/heads/main' }}
          tags: |
            type=edge,branch=main
            type=edge,branch=refactor-v2
            type=sha,format=short
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
          labels: |
            org.opencontainers.image.version={{version}}
            org.opencontainers.image.title=restinthemiddle
            org.opencontainers.image.description=Restinthemiddle HTTP proxy server
            org.opencontainers.image.source={{url}}
            org.opencontainers.image.revision={{sha}}
            org.opencontainers.image.created={{date 'iso8601'}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  coverage-summary:
    name: Coverage Summary
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*coverage*"
          merge-multiple: true

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Generate coverage report
        run: |
          echo "## ðŸ“Š Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f coverage.out ]; then
            UNIT_COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
            echo "ðŸ§ª **Unit Tests Coverage:** $UNIT_COVERAGE" >> $GITHUB_STEP_SUMMARY

            # Show top uncovered functions
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ðŸ“‹ Coverage Details" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            go tool cover -func=coverage.out | tail -10 >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "ðŸ§ª **Unit Tests Coverage:** Not available" >> $GITHUB_STEP_SUMMARY
          fi

          echo "ðŸ”— **Integration Tests:** Functional testing (no coverage measurement)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ“‹ [Download detailed coverage reports from artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
